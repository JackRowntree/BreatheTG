version: "2"
services:
 tgbot:
    build:
      context: "python"
      dockerfile: "Dockerfile"
    container_name: tgbot
    ports:
      - '8000:8000'
    depends_on:
      - broker
      - ksqldb
      - kafkacat
      - ksqldb-cli
    command: >
      /bin/bash -c "sleep 20 && python -u tg_bot.py"
    environment:
      - TG_TOKEN=${TG_TOKEN}

 zookeeper:
    image: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
 broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - '9092:9092'
    depends_on:
      - zookeeper
#    healthcheck:
#      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic airquality --describe"]
#      interval: 2s
#      timeout: 2s
#      retries: 15
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
 kafkacat:
    build: kafkacat
    container_name: kafkacat
    depends_on:
      - broker
    entrypoint:
      - /bin/bash
      - -c
      - /scripts/get_data.sh
  #      - sleep 100
#
 schema-registry:
    image: "confluentinc/cp-schema-registry:6.0.1"
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092

 ksqldb:
    image: confluentinc/ksqldb-server:latest
    container_name: ksqldb
    ports:
      - "8088:8088"
    depends_on:
      - broker
      - schema-registry
    environment:
      KSQL_BOOTSTRAP_SERVERS: broker:29092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_CONNECT_URL: http://kafka-connect:8083
      KSQL_KSQL_SERVICE_ID: confluent_rmoff_01
      KSQL_KSQL_HIDDEN_TOPICS: '^_.*,default_ksql_processing_log'
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: 'earliest'
 ksqldb-cli:
      build:
        context: "ksqldb-cli"
        dockerfile: "Dockerfile"
      container_name: ksqldb-cli
      depends_on:
        - broker
        - ksqldb
        - kafkacat
      volumes:
        - ./kafka/kafkacat/:/scripts/
      entrypoint:
        - /bin/bash
        - -c
        - scripts/create_ksql_stream.sh
  #      - sleep infinity;

      tty: true


##    https://rmoff.net/2018/12/15/docker-tips-and-tricks-with-kafka-connect-ksqldb-and-kafka/